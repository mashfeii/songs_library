// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mashfeii/songs_library/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// SongsServiceInterfaceMock is an autogenerated mock type for the SongsServiceInterface type
type SongsServiceInterfaceMock struct {
	mock.Mock
}

type SongsServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SongsServiceInterfaceMock) EXPECT() *SongsServiceInterfaceMock_Expecter {
	return &SongsServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// AddSong provides a mock function with given fields: ctx, songReq
func (_m *SongsServiceInterfaceMock) AddSong(ctx context.Context, songReq *domain.AddSongRequest) (int, error) {
	ret := _m.Called(ctx, songReq)

	if len(ret) == 0 {
		panic("no return value specified for AddSong")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AddSongRequest) (int, error)); ok {
		return rf(ctx, songReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AddSongRequest) int); ok {
		r0 = rf(ctx, songReq)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.AddSongRequest) error); ok {
		r1 = rf(ctx, songReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsServiceInterfaceMock_AddSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSong'
type SongsServiceInterfaceMock_AddSong_Call struct {
	*mock.Call
}

// AddSong is a helper method to define mock.On call
//   - ctx context.Context
//   - songReq *domain.AddSongRequest
func (_e *SongsServiceInterfaceMock_Expecter) AddSong(ctx interface{}, songReq interface{}) *SongsServiceInterfaceMock_AddSong_Call {
	return &SongsServiceInterfaceMock_AddSong_Call{Call: _e.mock.On("AddSong", ctx, songReq)}
}

func (_c *SongsServiceInterfaceMock_AddSong_Call) Run(run func(ctx context.Context, songReq *domain.AddSongRequest)) *SongsServiceInterfaceMock_AddSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.AddSongRequest))
	})
	return _c
}

func (_c *SongsServiceInterfaceMock_AddSong_Call) Return(_a0 int, _a1 error) *SongsServiceInterfaceMock_AddSong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsServiceInterfaceMock_AddSong_Call) RunAndReturn(run func(context.Context, *domain.AddSongRequest) (int, error)) *SongsServiceInterfaceMock_AddSong_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSong provides a mock function with given fields: ctx, id
func (_m *SongsServiceInterfaceMock) DeleteSong(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSong")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongsServiceInterfaceMock_DeleteSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSong'
type SongsServiceInterfaceMock_DeleteSong_Call struct {
	*mock.Call
}

// DeleteSong is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *SongsServiceInterfaceMock_Expecter) DeleteSong(ctx interface{}, id interface{}) *SongsServiceInterfaceMock_DeleteSong_Call {
	return &SongsServiceInterfaceMock_DeleteSong_Call{Call: _e.mock.On("DeleteSong", ctx, id)}
}

func (_c *SongsServiceInterfaceMock_DeleteSong_Call) Run(run func(ctx context.Context, id int)) *SongsServiceInterfaceMock_DeleteSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SongsServiceInterfaceMock_DeleteSong_Call) Return(_a0 error) *SongsServiceInterfaceMock_DeleteSong_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongsServiceInterfaceMock_DeleteSong_Call) RunAndReturn(run func(context.Context, int) error) *SongsServiceInterfaceMock_DeleteSong_Call {
	_c.Call.Return(run)
	return _c
}

// GetSongVerses provides a mock function with given fields: ctx, id, page, size
func (_m *SongsServiceInterfaceMock) GetSongVerses(ctx context.Context, id int, page int, size int) ([]string, error) {
	ret := _m.Called(ctx, id, page, size)

	if len(ret) == 0 {
		panic("no return value specified for GetSongVerses")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]string, error)); ok {
		return rf(ctx, id, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []string); ok {
		r0 = rf(ctx, id, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, id, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsServiceInterfaceMock_GetSongVerses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSongVerses'
type SongsServiceInterfaceMock_GetSongVerses_Call struct {
	*mock.Call
}

// GetSongVerses is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - page int
//   - size int
func (_e *SongsServiceInterfaceMock_Expecter) GetSongVerses(ctx interface{}, id interface{}, page interface{}, size interface{}) *SongsServiceInterfaceMock_GetSongVerses_Call {
	return &SongsServiceInterfaceMock_GetSongVerses_Call{Call: _e.mock.On("GetSongVerses", ctx, id, page, size)}
}

func (_c *SongsServiceInterfaceMock_GetSongVerses_Call) Run(run func(ctx context.Context, id int, page int, size int)) *SongsServiceInterfaceMock_GetSongVerses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *SongsServiceInterfaceMock_GetSongVerses_Call) Return(_a0 []string, _a1 error) *SongsServiceInterfaceMock_GetSongVerses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsServiceInterfaceMock_GetSongVerses_Call) RunAndReturn(run func(context.Context, int, int, int) ([]string, error)) *SongsServiceInterfaceMock_GetSongVerses_Call {
	_c.Call.Return(run)
	return _c
}

// GetSongs provides a mock function with given fields: ctx, filters, page, size
func (_m *SongsServiceInterfaceMock) GetSongs(ctx context.Context, filters map[string]string, page int, size int) ([]domain.Song, error) {
	ret := _m.Called(ctx, filters, page, size)

	if len(ret) == 0 {
		panic("no return value specified for GetSongs")
	}

	var r0 []domain.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, int, int) ([]domain.Song, error)); ok {
		return rf(ctx, filters, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, int, int) []domain.Song); ok {
		r0 = rf(ctx, filters, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, int, int) error); ok {
		r1 = rf(ctx, filters, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsServiceInterfaceMock_GetSongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSongs'
type SongsServiceInterfaceMock_GetSongs_Call struct {
	*mock.Call
}

// GetSongs is a helper method to define mock.On call
//   - ctx context.Context
//   - filters map[string]string
//   - page int
//   - size int
func (_e *SongsServiceInterfaceMock_Expecter) GetSongs(ctx interface{}, filters interface{}, page interface{}, size interface{}) *SongsServiceInterfaceMock_GetSongs_Call {
	return &SongsServiceInterfaceMock_GetSongs_Call{Call: _e.mock.On("GetSongs", ctx, filters, page, size)}
}

func (_c *SongsServiceInterfaceMock_GetSongs_Call) Run(run func(ctx context.Context, filters map[string]string, page int, size int)) *SongsServiceInterfaceMock_GetSongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *SongsServiceInterfaceMock_GetSongs_Call) Return(_a0 []domain.Song, _a1 error) *SongsServiceInterfaceMock_GetSongs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsServiceInterfaceMock_GetSongs_Call) RunAndReturn(run func(context.Context, map[string]string, int, int) ([]domain.Song, error)) *SongsServiceInterfaceMock_GetSongs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSong provides a mock function with given fields: ctx, song
func (_m *SongsServiceInterfaceMock) UpdateSong(ctx context.Context, song *domain.Song) error {
	ret := _m.Called(ctx, song)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSong")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Song) error); ok {
		r0 = rf(ctx, song)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongsServiceInterfaceMock_UpdateSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSong'
type SongsServiceInterfaceMock_UpdateSong_Call struct {
	*mock.Call
}

// UpdateSong is a helper method to define mock.On call
//   - ctx context.Context
//   - song *domain.Song
func (_e *SongsServiceInterfaceMock_Expecter) UpdateSong(ctx interface{}, song interface{}) *SongsServiceInterfaceMock_UpdateSong_Call {
	return &SongsServiceInterfaceMock_UpdateSong_Call{Call: _e.mock.On("UpdateSong", ctx, song)}
}

func (_c *SongsServiceInterfaceMock_UpdateSong_Call) Run(run func(ctx context.Context, song *domain.Song)) *SongsServiceInterfaceMock_UpdateSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Song))
	})
	return _c
}

func (_c *SongsServiceInterfaceMock_UpdateSong_Call) Return(_a0 error) *SongsServiceInterfaceMock_UpdateSong_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongsServiceInterfaceMock_UpdateSong_Call) RunAndReturn(run func(context.Context, *domain.Song) error) *SongsServiceInterfaceMock_UpdateSong_Call {
	_c.Call.Return(run)
	return _c
}

// NewSongsServiceInterfaceMock creates a new instance of SongsServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongsServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongsServiceInterfaceMock {
	mock := &SongsServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

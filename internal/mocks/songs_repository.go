// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mashfeii/songs_library/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// SongsRepositoryMock is an autogenerated mock type for the SongsRepository type
type SongsRepositoryMock struct {
	mock.Mock
}

type SongsRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SongsRepositoryMock) EXPECT() *SongsRepositoryMock_Expecter {
	return &SongsRepositoryMock_Expecter{mock: &_m.Mock}
}

// AddSong provides a mock function with given fields: ctx, song
func (_m *SongsRepositoryMock) AddSong(ctx context.Context, song *domain.Song) (int, error) {
	ret := _m.Called(ctx, song)

	if len(ret) == 0 {
		panic("no return value specified for AddSong")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Song) (int, error)); ok {
		return rf(ctx, song)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Song) int); ok {
		r0 = rf(ctx, song)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Song) error); ok {
		r1 = rf(ctx, song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsRepositoryMock_AddSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSong'
type SongsRepositoryMock_AddSong_Call struct {
	*mock.Call
}

// AddSong is a helper method to define mock.On call
//   - ctx context.Context
//   - song *domain.Song
func (_e *SongsRepositoryMock_Expecter) AddSong(ctx interface{}, song interface{}) *SongsRepositoryMock_AddSong_Call {
	return &SongsRepositoryMock_AddSong_Call{Call: _e.mock.On("AddSong", ctx, song)}
}

func (_c *SongsRepositoryMock_AddSong_Call) Run(run func(ctx context.Context, song *domain.Song)) *SongsRepositoryMock_AddSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Song))
	})
	return _c
}

func (_c *SongsRepositoryMock_AddSong_Call) Return(_a0 int, _a1 error) *SongsRepositoryMock_AddSong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsRepositoryMock_AddSong_Call) RunAndReturn(run func(context.Context, *domain.Song) (int, error)) *SongsRepositoryMock_AddSong_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSong provides a mock function with given fields: ctx, id
func (_m *SongsRepositoryMock) DeleteSong(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSong")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongsRepositoryMock_DeleteSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSong'
type SongsRepositoryMock_DeleteSong_Call struct {
	*mock.Call
}

// DeleteSong is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *SongsRepositoryMock_Expecter) DeleteSong(ctx interface{}, id interface{}) *SongsRepositoryMock_DeleteSong_Call {
	return &SongsRepositoryMock_DeleteSong_Call{Call: _e.mock.On("DeleteSong", ctx, id)}
}

func (_c *SongsRepositoryMock_DeleteSong_Call) Run(run func(ctx context.Context, id int)) *SongsRepositoryMock_DeleteSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SongsRepositoryMock_DeleteSong_Call) Return(_a0 error) *SongsRepositoryMock_DeleteSong_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongsRepositoryMock_DeleteSong_Call) RunAndReturn(run func(context.Context, int) error) *SongsRepositoryMock_DeleteSong_Call {
	_c.Call.Return(run)
	return _c
}

// GetSongByID provides a mock function with given fields: ctx, id
func (_m *SongsRepositoryMock) GetSongByID(ctx context.Context, id int) (*domain.Song, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSongByID")
	}

	var r0 *domain.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Song, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Song); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsRepositoryMock_GetSongByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSongByID'
type SongsRepositoryMock_GetSongByID_Call struct {
	*mock.Call
}

// GetSongByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *SongsRepositoryMock_Expecter) GetSongByID(ctx interface{}, id interface{}) *SongsRepositoryMock_GetSongByID_Call {
	return &SongsRepositoryMock_GetSongByID_Call{Call: _e.mock.On("GetSongByID", ctx, id)}
}

func (_c *SongsRepositoryMock_GetSongByID_Call) Run(run func(ctx context.Context, id int)) *SongsRepositoryMock_GetSongByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SongsRepositoryMock_GetSongByID_Call) Return(_a0 *domain.Song, _a1 error) *SongsRepositoryMock_GetSongByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsRepositoryMock_GetSongByID_Call) RunAndReturn(run func(context.Context, int) (*domain.Song, error)) *SongsRepositoryMock_GetSongByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSongs provides a mock function with given fields: ctx, filters, page, size
func (_m *SongsRepositoryMock) GetSongs(ctx context.Context, filters map[string]string, page int, size int) ([]domain.Song, error) {
	ret := _m.Called(ctx, filters, page, size)

	if len(ret) == 0 {
		panic("no return value specified for GetSongs")
	}

	var r0 []domain.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, int, int) ([]domain.Song, error)); ok {
		return rf(ctx, filters, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, int, int) []domain.Song); ok {
		r0 = rf(ctx, filters, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Song)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, int, int) error); ok {
		r1 = rf(ctx, filters, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SongsRepositoryMock_GetSongs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSongs'
type SongsRepositoryMock_GetSongs_Call struct {
	*mock.Call
}

// GetSongs is a helper method to define mock.On call
//   - ctx context.Context
//   - filters map[string]string
//   - page int
//   - size int
func (_e *SongsRepositoryMock_Expecter) GetSongs(ctx interface{}, filters interface{}, page interface{}, size interface{}) *SongsRepositoryMock_GetSongs_Call {
	return &SongsRepositoryMock_GetSongs_Call{Call: _e.mock.On("GetSongs", ctx, filters, page, size)}
}

func (_c *SongsRepositoryMock_GetSongs_Call) Run(run func(ctx context.Context, filters map[string]string, page int, size int)) *SongsRepositoryMock_GetSongs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *SongsRepositoryMock_GetSongs_Call) Return(_a0 []domain.Song, _a1 error) *SongsRepositoryMock_GetSongs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SongsRepositoryMock_GetSongs_Call) RunAndReturn(run func(context.Context, map[string]string, int, int) ([]domain.Song, error)) *SongsRepositoryMock_GetSongs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSong provides a mock function with given fields: ctx, song
func (_m *SongsRepositoryMock) UpdateSong(ctx context.Context, song *domain.Song) error {
	ret := _m.Called(ctx, song)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSong")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Song) error); ok {
		r0 = rf(ctx, song)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SongsRepositoryMock_UpdateSong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSong'
type SongsRepositoryMock_UpdateSong_Call struct {
	*mock.Call
}

// UpdateSong is a helper method to define mock.On call
//   - ctx context.Context
//   - song *domain.Song
func (_e *SongsRepositoryMock_Expecter) UpdateSong(ctx interface{}, song interface{}) *SongsRepositoryMock_UpdateSong_Call {
	return &SongsRepositoryMock_UpdateSong_Call{Call: _e.mock.On("UpdateSong", ctx, song)}
}

func (_c *SongsRepositoryMock_UpdateSong_Call) Run(run func(ctx context.Context, song *domain.Song)) *SongsRepositoryMock_UpdateSong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Song))
	})
	return _c
}

func (_c *SongsRepositoryMock_UpdateSong_Call) Return(_a0 error) *SongsRepositoryMock_UpdateSong_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SongsRepositoryMock_UpdateSong_Call) RunAndReturn(run func(context.Context, *domain.Song) error) *SongsRepositoryMock_UpdateSong_Call {
	_c.Call.Return(run)
	return _c
}

// NewSongsRepositoryMock creates a new instance of SongsRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongsRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongsRepositoryMock {
	mock := &SongsRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

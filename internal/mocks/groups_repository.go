// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GroupsRepositoryMock is an autogenerated mock type for the GroupsRepository type
type GroupsRepositoryMock struct {
	mock.Mock
}

type GroupsRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupsRepositoryMock) EXPECT() *GroupsRepositoryMock_Expecter {
	return &GroupsRepositoryMock_Expecter{mock: &_m.Mock}
}

// UpsertGroup provides a mock function with given fields: ctx, groupName
func (_m *GroupsRepositoryMock) UpsertGroup(ctx context.Context, groupName string) (int, error) {
	ret := _m.Called(ctx, groupName)

	if len(ret) == 0 {
		panic("no return value specified for UpsertGroup")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, groupName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupsRepositoryMock_UpsertGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertGroup'
type GroupsRepositoryMock_UpsertGroup_Call struct {
	*mock.Call
}

// UpsertGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
func (_e *GroupsRepositoryMock_Expecter) UpsertGroup(ctx interface{}, groupName interface{}) *GroupsRepositoryMock_UpsertGroup_Call {
	return &GroupsRepositoryMock_UpsertGroup_Call{Call: _e.mock.On("UpsertGroup", ctx, groupName)}
}

func (_c *GroupsRepositoryMock_UpsertGroup_Call) Run(run func(ctx context.Context, groupName string)) *GroupsRepositoryMock_UpsertGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupsRepositoryMock_UpsertGroup_Call) Return(_a0 int, _a1 error) *GroupsRepositoryMock_UpsertGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupsRepositoryMock_UpsertGroup_Call) RunAndReturn(run func(context.Context, string) (int, error)) *GroupsRepositoryMock_UpsertGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupsRepositoryMock creates a new instance of GroupsRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupsRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupsRepositoryMock {
	mock := &GroupsRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
